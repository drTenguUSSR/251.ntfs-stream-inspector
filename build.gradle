buildscript {
    ext {
        lombokVersion = '1.18.36'
        log4jVersion = '2.23.1'
    }
}

plugins {
    id('application')
    id('idea')
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
    google()
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.2")
    testImplementation('org.mockito:mockito-core:3.12.4')

    // https://mvnrepository.com/artifact/com.google.guava/guava
    //implementation "com.google.guava:guava:30.1.1-jre"
    implementation 'com.google.guava:guava:33.4.0-jre'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api
    implementation "org.apache.logging.log4j:log4j-api:2.23.1"

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation "org.apache.logging.log4j:log4j-core:2.23.1"

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1"

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:2.0.16'

    // https://projectlombok.org
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    //NTFS sub
    implementation 'net.java.dev.jna:jna-platform:5.16.0'

    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation 'commons-cli:commons-cli:1.9.0'

    // https://mvnrepository.com/artifact/org.apache.tika/tika-core
    implementation("org.apache.tika:tika-core:2.9.4")

    // https://mvnrepository.com/artifact/org.apache.tika/tika-parsers
    implementation("org.apache.tika:tika-parsers:2.9.4")

    // https://mvnrepository.com/artifact/de.vandermeer/asciitable
    implementation("de.vandermeer:asciitable:0.3.2")
}

application {
    mainClass = "mil.teng251.ntfs.streams.inspector.App"
    //applicationDefaultJvmArgs = ['-Dlog4j.configurationFile=./log4j2-xxx.xml']
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
    manifest {
        attributes(
                "Main-Class": application.mainClass
        )
        //baseName '251_SmtpSender'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.withType(JavaCompile) {
    options.deprecation = true
    options.warnings = true
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    useJUnitPlatform()
    println 'gradle! task-test'
    testLogging {
        events "passed", "skipped", "failed"
    }
    //maxParallelForks = Runtime.runtime.availableProcessors()
    //forkEvery = 1
    //jvmArgs '-Xmx1024m', '-XX:MaxPermSize=256m'
    reports {
        html.enabled = true
        junitXml.enabled = true
    }
}

tasks.named('run') {
    systemProperties = System.properties
    def log4jcfg='config/log4j2.xml'
    File cfgFile = new File(log4jcfg)
    if (cfgFile.exists()) {
        println "log4j \"$log4jcfg\" found"
        systemProperties['log4j.configurationFile'] = log4jcfg
    } else {
        println "log4j \"$log4jcfg\" not-found"
    }

    it.doFirst {
        //systemProperty 'java.io.tmpdir', 'tmpFolder'
        println 'gradle! doFirst.'
        println "env.tmpFolder=\"${System.getenv('temp')}\""
    }
    println 'gradle! task-run, configure'
}
